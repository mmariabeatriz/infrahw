$date
	Mon Jul 14 01:56:47 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module test_j_type $end
$var wire 2 ! store_size_control [1:0] $end
$var wire 2 " shift_amt_selector [1:0] $end
$var wire 1 # reg_write $end
$var wire 1 $ reg_dst $end
$var wire 1 % pc_write_cond $end
$var wire 1 & pc_write $end
$var wire 2 ' pc_source [1:0] $end
$var wire 1 ( mem_write $end
$var wire 1 ) mem_to_reg $end
$var wire 1 * mem_read $end
$var wire 2 + load_size_control [1:0] $end
$var wire 1 , jump $end
$var wire 5 - current_state [4:0] $end
$var wire 1 . branch $end
$var wire 1 / alu_src $end
$var wire 4 0 alu_op [3:0] $end
$var wire 4 1 alu_control [3:0] $end
$var reg 1 2 clk $end
$var reg 32 3 instruction [31:0] $end
$var reg 1 4 reset $end
$scope module uut $end
$var wire 1 2 clk $end
$var wire 5 5 current_state [4:0] $end
$var wire 1 6 div_zero $end
$var wire 32 7 instruction [31:0] $end
$var wire 1 8 overflow $end
$var wire 1 4 reset $end
$var wire 1 9 zero_flag $end
$var parameter 6 : FUNCT_ADD $end
$var parameter 6 ; FUNCT_AND $end
$var parameter 6 < FUNCT_DIV $end
$var parameter 6 = FUNCT_JR $end
$var parameter 6 > FUNCT_MFHI $end
$var parameter 6 ? FUNCT_MFLO $end
$var parameter 6 @ FUNCT_MULT $end
$var parameter 6 A FUNCT_SLL $end
$var parameter 6 B FUNCT_SLT $end
$var parameter 6 C FUNCT_SRA $end
$var parameter 6 D FUNCT_SUB $end
$var parameter 6 E FUNCT_XCHG $end
$var parameter 6 F OP_ADDI $end
$var parameter 6 G OP_BEQ $end
$var parameter 6 H OP_BNE $end
$var parameter 6 I OP_J $end
$var parameter 6 J OP_JAL $end
$var parameter 6 K OP_LB $end
$var parameter 6 L OP_LUI $end
$var parameter 6 M OP_LW $end
$var parameter 6 N OP_SB $end
$var parameter 6 O OP_SLLM $end
$var parameter 6 P OP_SW $end
$var parameter 6 Q OP_TYPE_R $end
$var parameter 5 R ST_ADD $end
$var parameter 5 S ST_ADDI $end
$var parameter 5 T ST_AND $end
$var parameter 5 U ST_BEQ $end
$var parameter 5 V ST_BNE $end
$var parameter 5 W ST_DECODE $end
$var parameter 5 X ST_DIV $end
$var parameter 5 Y ST_DIV0 $end
$var parameter 5 Z ST_FETCH $end
$var parameter 5 [ ST_J $end
$var parameter 5 \ ST_JAL $end
$var parameter 5 ] ST_JR $end
$var parameter 5 ^ ST_LB $end
$var parameter 5 _ ST_LUI $end
$var parameter 5 ` ST_LW $end
$var parameter 5 a ST_MFHI $end
$var parameter 5 b ST_MFLO $end
$var parameter 5 c ST_MULT $end
$var parameter 5 d ST_OPCODE404 $end
$var parameter 5 e ST_OVERFLOW $end
$var parameter 5 f ST_RESET $end
$var parameter 5 g ST_SB $end
$var parameter 5 h ST_SLL $end
$var parameter 5 i ST_SLLM $end
$var parameter 5 j ST_SLT $end
$var parameter 5 k ST_SRA $end
$var parameter 5 l ST_SUB $end
$var parameter 5 m ST_SW $end
$var parameter 5 n ST_XCHG $end
$var reg 26 o address [25:0] $end
$var reg 4 p alu_control [3:0] $end
$var reg 4 q alu_op [3:0] $end
$var reg 1 r alu_overflow $end
$var reg 1 / alu_src $end
$var reg 1 s alu_zero $end
$var reg 1 . branch $end
$var reg 5 t counter [4:0] $end
$var reg 6 u funct [5:0] $end
$var reg 16 v immediate [15:0] $end
$var reg 1 , jump $end
$var reg 2 w load_size_control [1:0] $end
$var reg 1 * mem_read $end
$var reg 1 ) mem_to_reg $end
$var reg 1 ( mem_write $end
$var reg 6 x opcode [5:0] $end
$var reg 2 y pc_source [1:0] $end
$var reg 1 & pc_write $end
$var reg 1 % pc_write_cond $end
$var reg 5 z rd [4:0] $end
$var reg 1 $ reg_dst $end
$var reg 1 # reg_write $end
$var reg 5 { rs [4:0] $end
$var reg 5 | rt [4:0] $end
$var reg 5 } shamt [4:0] $end
$var reg 2 ~ shift_amt_selector [1:0] $end
$var reg 5 !" state [4:0] $end
$var reg 2 "" store_size_control [1:0] $end
$scope task decode_instruction $end
$upscope $end
$scope task handle_add_state $end
$upscope $end
$scope task handle_addi_state $end
$upscope $end
$scope task handle_and_state $end
$upscope $end
$scope task handle_beq_state $end
$upscope $end
$scope task handle_bne_state $end
$upscope $end
$scope task handle_decode_state $end
$upscope $end
$scope task handle_div0_state $end
$upscope $end
$scope task handle_div_state $end
$upscope $end
$scope task handle_fetch_state $end
$upscope $end
$scope task handle_j_state $end
$upscope $end
$scope task handle_jal_state $end
$upscope $end
$scope task handle_jr_state $end
$upscope $end
$scope task handle_lb_state $end
$upscope $end
$scope task handle_lui_state $end
$upscope $end
$scope task handle_lw_state $end
$upscope $end
$scope task handle_mfhi_state $end
$upscope $end
$scope task handle_mflo_state $end
$upscope $end
$scope task handle_mult_state $end
$upscope $end
$scope task handle_opcode404_state $end
$upscope $end
$scope task handle_overflow_state $end
$upscope $end
$scope task handle_reset_state $end
$upscope $end
$scope task handle_sb_state $end
$upscope $end
$scope task handle_sll_state $end
$upscope $end
$scope task handle_sllm_state $end
$upscope $end
$scope task handle_slt_state $end
$upscope $end
$scope task handle_sra_state $end
$upscope $end
$scope task handle_sub_state $end
$upscope $end
$scope task handle_sw_state $end
$upscope $end
$scope task handle_xchg_state $end
$upscope $end
$scope task reset_control_signals $end
$upscope $end
$upscope $end
$scope task do_reset $end
$upscope $end
$scope task execute_instruction $end
$var reg 32 #" instr [31:0] $end
$var reg 56 $" name [56:1] $end
$upscope $end
$scope task wait_cycles $end
$var integer 32 %" cycles [31:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b1110 n
b10111 m
b1101 l
b1100 k
b1011 j
b10010 i
b1010 h
b10110 g
b0 f
b11010 e
b11011 d
b110 c
b1001 b
b1000 a
b10101 `
b10100 _
b10011 ^
b111 ]
b11001 \
b11000 [
b1 Z
b11100 Y
b101 X
b10 W
b10001 V
b10000 U
b100 T
b1111 S
b11 R
b0 Q
b101011 P
b1 O
b101000 N
b100011 M
b1111 L
b100000 K
b11 J
b10 I
b101 H
b100 G
b1000 F
b101 E
b100010 D
b11 C
b101010 B
b0 A
b11000 @
b10010 ?
b10000 >
b1000 =
b11010 <
b100100 ;
b100000 :
$end
#0
$dumpvars
bx %"
bx $"
bx #"
bx ""
b0 !"
bx ~
bx }
bx |
bx {
bx z
bx y
bx x
bx w
bx v
bx u
bx t
xs
xr
bx q
bx p
bx o
z9
z8
bx 7
z6
b0 5
14
bx 3
02
bx 1
bx 0
x/
x.
b0 -
x,
bx +
x*
x)
x(
bx '
x&
x%
x$
x#
bx "
bx !
$end
#5000
b0 t
12
#10000
02
#15000
12
#20000
02
04
#25000
b1 -
b1 5
b1 !"
0r
0s
b0 1
b0 p
b0 "
b0 ~
b0 '
b0 y
0%
0&
b0 !
b0 ""
b0 +
b0 w
0#
0/
0(
b0 0
b0 q
0)
0*
0.
0,
0$
12
#30000
b1100 o
b1100 v
b1100 u
b0 }
b0 z
b0 |
b0 {
b10 x
02
b101 %"
b1000000000000000000000001100 3
b1000000000000000000000001100 7
b1001010 $"
b1000000000000000000000001100 #"
#35000
b10 -
b10 5
b10 !"
1&
1*
12
#40000
02
#45000
b11000 -
b11000 5
b11000 !"
12
#50000
02
#55000
b1 -
b1 5
b1 !"
b11 '
b11 y
1,
12
#60000
02
#65000
b10 -
b10 5
b10 !"
b0 '
b0 y
1&
1*
0,
12
#70000
02
#75000
b11000 -
b11000 5
b11000 !"
b11 %"
12
#80000
02
#85000
b1 -
b1 5
b1 !"
b11 '
b11 y
1,
12
#90000
02
#95000
b10 -
b10 5
b10 !"
b0 '
b0 y
1&
1*
0,
12
#100000
02
#105000
b0 o
b0 v
b0 u
b11 x
b11000 -
b11000 5
b11000 !"
b101 %"
b1100000000000000000000000000 3
b1100000000000000000000000000 7
b10010100100000101001100 $"
b1100000000000000000000000000 #"
12
#110000
02
#115000
b1 -
b1 5
b1 !"
b11 '
b11 y
1,
12
#120000
02
#125000
b10 -
b10 5
b10 !"
b0 '
b0 y
1&
1*
0,
12
#130000
02
#135000
b11001 -
b11001 5
b11001 !"
12
#140000
02
#145000
b1 -
b1 5
b1 !"
1#
b11 '
b11 y
1,
12
#150000
02
#155000
b10 -
b10 5
b10 !"
b0 '
b0 y
1&
0#
1*
0,
12
#160000
02
#165000
b11001 -
b11001 5
b11001 !"
12
#170000
02
#175000
b1 -
b1 5
b1 !"
1#
b11 '
b11 y
1,
12
#180000
02
#185000
b10 -
b10 5
b10 !"
b0 '
b0 y
1&
0#
1*
0,
12
#190000
02
#195000
b11001 -
b11001 5
b11001 !"
12
#200000
02
#205000
b1 -
b1 5
b1 !"
1#
b11 '
b11 y
1,
12
